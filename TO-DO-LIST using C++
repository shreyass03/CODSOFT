#include <iostream>
#include <vector>

struct Task {
    std::string description;
    bool completed;
};

void addTask(std::vector<Task>& tasks, const std::string& description) {
    Task newTask;
    newTask.description = description;
    newTask.completed = false;
    tasks.push_back(newTask);
    std::cout << "Adding task is completed." << std::endl;
}

void viewTasks(const std::vector<Task>& tasks) {
    std::cout << "Tasks:" << std::endl;
    for (const Task& task : tasks) {
        std::cout << "- " << task.description;
        if (task.completed) {
            std::cout << " (completed)";
        }
        std::cout << std::endl;
    }
}

void markTaskAsCompleted(std::vector<Task>& tasks, int index) {
    if (index >= 0 && index < tasks.size()) {
        tasks[index].completed = true;
        std::cout << "Task marked as completed." << std::endl;
    } else {
        std::cout << "no task in index." << std::endl;
    }
}

void removeTask(std::vector<Task>& tasks, int index) {
    if (index >= 0 && index < tasks.size()) {
        tasks.erase(tasks.begin() + index);
        std::cout << "Task removed successfully." << std::endl;
    } else {
        std::cout << "no task in index." << std::endl;
    }
}

int main() {
    std::vector<Task> tasks;
    std::string description;
    int choice, index;

    std::cout << "Welcome to the To-Do List Manager!" << std::endl;

    do {
        std::cout << "\nChoose an option:\n";
        std::cout << "1. Add Task\n";
        std::cout << "2. View Tasks\n";
        std::cout << "3. Mark Task as Completed\n";
        std::cout << "4. Remove Task\n";
        std::cout << "5. Exit\n";
        std::cout << "Enter your choice: ";
        std::cin >> choice;

        switch (choice) {
            case 1:
                std::cout << "Enter the task description: ";
                std::cin.ignore();
                std::getline(std::cin, description);
                addTask(tasks, description);
                break;
            case 2:
                viewTasks(tasks);
                break;
            case 3:
                std::cout << "Enter the  task index: ";
                std::cin >> index;
                markTaskAsCompleted(tasks, index);
                break;
            case 4:
                std::cout << "Enter the task index: ";
                std::cin >> index;
                removeTask(tasks, index);
                break;
            case 5:
                std::cout << "Exit the program. Goodbye!" << std::endl;
                break;
            default:
                std::cout << "no choice. Please try again." << std::endl;
        }
    } while (choice != 5);

    return 0;
}
